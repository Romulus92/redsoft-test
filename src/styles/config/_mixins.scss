@mixin gradient-border($color1, $color2, $border-width, $direction) {
  border: none;
  background-repeat: no-repeat;
  background-image: linear-gradient(#{$direction}, $color1 0%, $color2 100%),
  linear-gradient(#{$direction}, $color1 0%, $color2 100%);
  @if $direction=='to right' or $direction=='to left' {
    @if $direction=='to right' {
      border-left: $border-width solid $color1;
      border-right: $border-width solid $color2;
    }
    @else {
      border-left: $border-width solid $color2;
      border-right: $border-width solid $color1;
    }
    background-position: 0 0,
    0 100%;
    background-size: 100% $border-width;
  }
  @if $direction=='to top' or $direction=='to bottom' {
    @if $direction=='to top' {
      border-top: $border-width solid $color2;
      border-bottom: $border-width solid $color1;
    }
    @else {
      border-top: $border-width solid $color1;
      border-bottom: $border-width solid $color2;
    }
    background-position: 0 0,
    100% 0;
    background-size: $border-width 100%;
  }
}

//ANGLED EDGES BG
@function ae-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+ae-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

/// Encode SVG to use as background.
///
/// @param  {String}  $string
/// @return {String}  Encoded svg data
///
@function ae-svg-encode($string) {
  $result: ae-str-replace($string, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
  $result: ae-str-replace($result, '%', '%25');
  $result: ae-str-replace($result, '"', '\'');
  $result: ae-str-replace($result, '<', '%3C');
  $result: ae-str-replace($result, '>', '%3E');
  @return 'data:image/svg+xml,'+$result;
}

/// Outputs pseudo content for main mixin.
///
/// @author Joseph Fusco
///
/// @param  {String}  $location
/// @param  {Number}  $height
/// @output psuedo content
///
@mixin ae-pseudo($wedge, $height, $width) {
  background-image: url($wedge);
  background-position: center center;
  background-repeat: no-repeat; // full width wedge - needed as Firefox ignores preserveAspectRatio="none" in this case
  @if ($width==null) {
    background-size: 100% 100%;
  }
  content: '';
  height: $height * 1px;
  left: 0;
  position: absolute;
  right: 0;
  width: 100%;
  z-index: 1;
}

/// Attatches an svg wedge shape to an element.
///
/// @author Joseph Fusco
///
/// @param  {String}  $location   - 'inside top', 'outside top', 'inside bottom', 'outside bottom'
/// @param  {String}  $hypotenuse - 'upper left', 'upper right', 'lower left', 'lower right'
/// @param  {Color}   $fill
/// @param  {Number}  $height
/// @param  {Number}  $width
/// @output '::before' and/or '::after' with svg background image
///
@mixin angled-edge($location, $hypotenuse, $fill, $height: 100, $width: null) {
  position: relative;
  $points: ( 'upper left': '0,#{$height} #{$width},#{$height} #{$width},0', 'upper right': '0,#{$height} #{$width},#{$height} 0,0', 'lower left': '0,0 #{$width},#{$height} #{$width},0', 'lower right': '0,0 #{$width},0 0,#{$height}'); // full width wedge
  @if ($width==null) {
    $points: ( 'upper left': '0,#{$height} 100,#{$height} 100,0', 'upper right': '0,#{$height} 100,#{$height} 0,0', 'lower left': '0,0 100,#{$height} 100,0', 'lower right': '0,0 100,0 0,#{$height}');
  } // ensure $fill color is using rgb()
  $fill-rgb: 'rgb('+round(red($fill))+','+round(green($fill))+','+round(blue($fill))+')'; // capture alpha component of $fill to use with fill-opacity
  $fill-alpha: alpha($fill);
  $wedge: '<svg width="#{$width}" height="#{$height}" fill="#{$fill-rgb}" fill-opacity="#{$fill-alpha}"><polygon points="#{map-get($points, $hypotenuse)}"></polygon></svg>'; // full width wedge
  @if ($width==null) {
    $wedge: '<svg preserveAspectRatio="none" viewBox="0 0 100 #{$height}" fill="#{$fill-rgb}" fill-opacity="#{$fill-alpha}"><polygon points="#{map-get($points, $hypotenuse)}"></polygon></svg>';
  }
  $encoded-wedge: ae-svg-encode($wedge);
  @if ($location=='inside top') {
    &::before {
      @include ae-pseudo($encoded-wedge, $height, $width);
      top: 0;
    }
  }
  @else if ($location=='outside top') {
    &::before {
      @include ae-pseudo($encoded-wedge, $height, $width);
      top: -$height * 1px;
    }
  }
  @else if ($location=='inside bottom') {
    &::after {
      @include ae-pseudo($encoded-wedge, $height, $width);
      bottom: 0;
    }
  }
  @else if ($location=='outside bottom') {
    &::after {
      @include ae-pseudo($encoded-wedge, $height, $width);
      bottom: -$height * 1px;
    }
  }
  @else {
    @error 'Invalid argument for $location - must use: `inside top`, `outside top`, `inside bottom`, `outside bottom`';
  }
  @if (map-has-key($points, $hypotenuse)==false) {
    @error 'Invalid argument for $hypotenuse - must use: `upper left`, `upper right`, `lower left`, `lower right`';
  }
}

@mixin macbookair {
  @media screen and (max-width: $macbookair) {
    @content;
  }
}

@mixin bignotebooks {
  @media screen and (max-width: $bignotebooks) {
    @content;
  }
}

@mixin notebooks {
  @media screen and (max-width: $notebooks) {
    @content;
  }
}

@mixin netbooks {
  @media screen and (max-width: $netbooks) {
    @content;
  }
}

@mixin tablets {
  @media screen and (max-width: $tablets) {
    @content;
  }
}

@mixin minitablets {
  @media screen and (max-width: $minitablets) {
    @content;
  }
}

@mixin phones {
  @media screen and (max-width: $phones) {
    @content;
  }
}

@mixin iphones {
  @media screen and (max-width: $iphones) {
    @content;
  }
}

@mixin phonesheight {
  @media screen and (max-height: $phonesheight) {
    @content;
  }
}